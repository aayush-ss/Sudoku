import random as rd

def tablav():
  print(" c 1   2   3   4   5   6   7   8   9")
  print("r+===+===+===+===+===+===+===+===+===+")
  print("1|",ppp[0][0],":",ppp[0][1],":",ppp[0][2],"|",end=" ")
  print(ppp[0][3],":",ppp[0][4],":",ppp[0][5],"|",end=" ")
  print(ppp[0][6],":",ppp[0][7],":",ppp[0][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("2|",ppp[1][0],":",ppp[1][1],":",ppp[1][2],"|",end=" ")
  print(ppp[1][3],":",ppp[1][4],":",ppp[1][5],"|",end=" ")
  print(ppp[1][6],":",ppp[1][7],":",ppp[1][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("3|",ppp[2][0],":",ppp[2][1],":",ppp[2][2],"|",end=" ")
  print(ppp[2][3],":",ppp[2][4],":",ppp[2][5],"|",end=" ")
  print(ppp[2][6],":",ppp[2][7],":",ppp[2][8],"|")
  print(" +===+===+===+===+===+===+===+===+===+")
  print("4|",ppp[3][0],":",ppp[3][1],":",ppp[3][2],"|",end=" ")
  print(ppp[3][3],":",ppp[3][4],":",ppp[3][5],"|",end=" ")
  print(ppp[3][6],":",ppp[3][7],":",ppp[3][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("5|",ppp[4][0],":",ppp[4][1],":",ppp[4][2],"|",end=" ")
  print(ppp[4][3],":",ppp[4][4],":",ppp[4][5],"|",end=" ")
  print(ppp[4][6],":",ppp[4][7],":",ppp[4][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("6|",ppp[5][0],":",ppp[5][1],":",ppp[5][2],"|",end=" ")
  print(ppp[5][3],":",ppp[5][4],":",ppp[5][5],"|",end=" ")
  print(ppp[5][6],":",ppp[5][7],":",ppp[5][8],"|")
  print(" +===+===+===+===+===+===+===+===+===+")
  print("7|",ppp[6][0],":",ppp[6][1],":",ppp[6][2],"|",end=" ")
  print(ppp[6][3],":",ppp[6][4],":",ppp[6][5],"|",end=" ")
  print(ppp[6][6],":",ppp[6][7],":",ppp[6][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("8|",ppp[7][0],":",ppp[7][1],":",ppp[7][2],"|",end=" ")
  print(ppp[7][3],":",ppp[7][4],":",ppp[7][5],"|",end=" ")
  print(ppp[7][6],":",ppp[7][7],":",ppp[7][8],"|")
  print(" |---+---+---|---+---+---|---+---+---|")
  print("9|",ppp[8][0],":",ppp[8][1],":",ppp[8][2],"|",end=" ")
  print(ppp[8][3],":",ppp[8][4],":",ppp[8][5],"|",end=" ")
  print(ppp[8][6],":",ppp[8][7],":",ppp[8][8],"|")
  print(" +===+===+===+===+===+===+===+===+===+\n")

p=[[],[],[],[],[],[],[],[],[]]
pp=[[],[],[],[],[],[],[],[],[]]
pi=[[],[],[],[],[],[],[],[],[]]

ppp=[[' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' '],
     [' ',' ',' ',' ',' ',' ',' ',' ',' ']]

def k(i,j):
  if i <3:
    if j<3:
      return 0
    elif j <6:
      return 1
    else :
      return 2
  elif i < 6:
    if j<3:
      return 3
    elif j <6:
      return 4
    else:
      return 5
  else :
    if j<3:
      return 6
    elif j<6:
      return 7
    else :
      return 8
      
def n(f):
  if f%3 is 0:
    return 0
  elif f%3 is 1:
    return 3
  else:
    return 6
    
for i in range(9):
  kutu =[(*range(1,10))]  
  j = 0
  h = 0
  while j <9:
    x = rd.randint(0,8-j)
    a = kutu.pop(x)        
    if (a not in p[i]) and (a not in pp[j]) and (a not in pi[k(i,j)]):
      p[i].append(a)
      pp[j].append(a)
      pi[k(i,j)].append(a)
      j +=1
      h = 0
    else:
      kutu.append(a)
      h +=1
    if h > 20 :
      h =0
      kutu =[*range(1,10)]
      p[i].clear()
      for m in range(j):
        del(pp[m][i])
      for g in range(j):
        del(pi[k(i,g)][(n(i)):])
      j = 0

def play():
  while True:
    count=0
    for i in ppp:
      if ' ' not in i:
        count+=1
      if count==9:
        print("Game finished!")
        quit()
    poss=input("Position: r c n, example 6 4 2\n")
    pos=list(poss)
    pos.append(' ')
    pos.append(' ')
    pos.append(' ')
    pos.append(' ')
    pos.append(' ')
    if pos[1]==' ' and pos[3]==' ' and pos[0]!=' ' and pos[2]!=' ' and pos[4]!=' ' and len(pos)>=5:
      r=int(pos[0])
      c=int(pos[2])
      n=int(pos[4])
      if ppp[r-1][c-1]==' ':
        if p[r-1][c-1]==n:
          ppp[r-1][c-1]=p[r-1][c-1]
          tablav()
        else:
          print("Error")
      elif ppp[r-1][c-1]!=' ':
        print("Error")
    else:
      print("Error. It must be row col num (r c n)")

print("SudokuPy by raulsantosjaja\n")
tablav()
while True:
  dif=int(input("Difficulty:\n1) Easy\n2) Normal\n3) Hard\n"))
  if dif==1:
    for i in range(9):
      n=[0,1,2,3,4,5,6,7,8]
      for j in range(6):
        x=rd.choice(n)
        ppp[i][x]=p[i][x]
        n.remove(x)
  elif dif==2:
    for i in range(9):
      n=[0,1,2,3,4,5,6,7,8]
      for j in range(4):
        x=rd.choice(n)
        ppp[i][x]=p[i][x]
        n.remove(x)
  elif dif==3:
    for i in range(9):
      n=[0,1,2,3,4,5,6,7,8]
      for j in range(3):
        x=rd.choice(n)
        ppp[i][x]=p[i][x]
        n.remove(x)
  else:
    print("Error")
  if dif==1 or dif==2 or dif==3:
    tablav()
    play()
    break